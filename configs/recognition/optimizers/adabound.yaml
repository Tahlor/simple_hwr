### TESTING
TESTING: false        # Use batch figsize of 1, only do one batch per epoch; will still save etc.
SMALL_TRAINING: false  # Load 1 batch; will not save output
GPU: true             # Use GPU if available
TEST_FREQ: 1         # epoch frequency for running test set
plot_freq: 50         # print updates, update plots every 50 batches
images_to_load: null  # use an integer to load e.g. first 16 images

## Things that shouldn't matter much:
# Random shuffling
# Number of channels (3 vs 1)
# Batch figsize 8 vs 16

# Load model
load_path: false # ./results/baseline/20190622_155031-lr_0.001_bs_16_warp_False_arch_basic_encoder/baseline_model.pt # or false
#load_path: /media/data/GitHub/simple_hwr/results/baseline/20190625_092305-lr_0.001_bs_16_warp_True_arch_basic_encoder/baseline_model.pt
test_only: false                             # Do not train

# General
experiment: optimizers
name: sgd
output_folder: ./results
epochs_to_run: 200
save_freq: 1
use_visdom: true
debug: off
decoder_type: naive # beam
optimizer_type: adabound

# results_dir:
# log_dir:

# Training data
training_jsons: [prepare_IAM_Lines/gts/lines/txt/training.json, prepare_online_data/online_augmentation.json]
training_root: ../simple_hwr/data
training_shuffle: false
training_warp: true
online_augmentation: false                  # use online+offline data
online_flag: false                          # include a flag designating instance as online/offline
writer_id_pickles: [prepare_IAM_Lines/writer_IDs.pickle, prepare_online_data/writer_IDs.pickle]

# Testing data
testing_jsons: [prepare_IAM_Lines/gts/lines/txt/test.json]
testing_root: ../simple_hwr/data
testing_shuffle: false
n_warp_iterations: 0
testing_warp: false
testing_occlude: false
output_predictions: false                    # Output incorrect test predictions

#Network
style_encoder: false                         # "False", "basic_encoder", "fake_encoder" - RNN + MLP (author classifier) -> embedding
batch_size: 16                               # Batch figsize
input_height: 60                             # Input dimension of image (will be cropped by default?)
cnn_out_size: 1024                           # Output dimension of CNN
num_of_channels: 1                           # Number of channels in input image
rnn_dimension: 512                           # originally 512
rnn_layers: 2
rnn_type: lstm                               # gru, lstm
cnn: default                                  # default, resnet, intermediates

# Recognizer parameters
recognizer_dropout: .5                       # Dropout in recognizer LSTM

# Writer Classifier - LSTM + MLP (with embedding layer)
writer_dropout: 0.4                          # Probability of being "dropped out" in writer LSTM+MLP
writer_rnn_dimension: 128                    # Dimension of LSTM state vector
writer_rnn_output_size: 256                  # LSTM output dimension for writer classifier
mlp_layers: [64,embedding,64]             # Layer dimensions for MLP writer classifier
embedding_size: 32                           # The figsize of the embedding layer in the MLP

# LR schedule
learning_rate: 2e-4          # LR
scheduler_step: 10           # Every X steps, multiply LR by gamma
scheduler_gamma: .95          # LR decay rate

#learning_rate: 5e-4          # LR
#scheduler_step: 2         # Every X steps, multiply LR by gamma
#scheduler_gamma: .95          # LR decay rate

# Occlusion
occlusion_size: null          # Square dimension in pixels of region to occlude
occlusion_freq: null          # percent of pixels to occlude